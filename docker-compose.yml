version: '3.7'
## default logging config
x-logging:
  &default-logging
  options:
    max-size: '12m'
    max-file: '5'
  driver: json-file
services:
  ########################
  ## Redis service
  ########################
  redis:
    image: bys-cd.chinacloudapp.cn/library/redis:5.0-alpine
    logging: *default-logging
    # cpus: 0.5
    # cpu_quota: 50000
    # mem_limit: 1g
    # memswap_limit: 2g
    ports:
      - "6379:6379"
    volumes:
      - "./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf:ro"
      - "./redis/data:/data"
      - "./redis/log:/var/log/redis"
    networks:
      - backend
    # container_name: c-redis
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf --tcp-backlog 128
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s

  ########################
  ## mongo service
  ########################
  mongo:
    image: bys-cd.chinacloudapp.cn/library/mongo:4.0
    logging: *default-logging
    ports:
      - "27017:27017"
    volumes:
      - "./mongo/conf/mongod.yml:/etc/mongod.yml:ro"
      - "./mongo/data/db:/data/db"
      - "./mongo/data/configdb:/data/configdb"
    networks:
      - backend
    # container_name: c-mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "100085"
      MONGO_INITDB_DATABASE: "db"
    command: mongod --config /etc/mongod.yml
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  # mongo-express 
  mongo-express:
    image: bys-cd.chinacloudapp.cn/library/mongo-express:0.49
    logging: *default-logging
    ports:
      - "8081:8081"
    networks:
      - backend
    # container_name: c-mongo-express
    depends_on:
      - mongo
    restart: always
    environment:
      ME_CONFIG_MONGODB_PORT: "27017"
      ME_CONFIG_BASICAUTH_USERNAME: "bys"
      ME_CONFIG_BASICAUTH_PASSWORD: "bys2018"
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: "root"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "100085"
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## mysql service
  ########################
  mysql:
    image: bys-cd.chinacloudapp.cn/library/mysql:5.7
    logging: *default-logging
    ports:
      - "3306:3306"
    volumes:
      - "./mysql/conf/my.cnf:/etc/mysql/my.cnf:ro"
      - "./mysql/data:/var/lib/mysql"
    networks:
      - backend
    # container_name: c-mysql
    restart: always
    environment:
      MYSQL_DATABASE: "db"
      MYSQL_ROOT_PASSWORD: "100085"
      MYSQL_USER: "bys"
      MYSQL_PASSWORD: "bys2018"
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == db
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## postgres service
  ########################
  postgres:
    image: bys-cd.chinacloudapp.cn/library/postgres:11-alpine
    logging: *default-logging
    ports:
      - "5432:5432"
    volumes:
      - "./postgres/conf/postgres.conf:/etc/postgresql/postgresql.conf:ro"
      - "./postgres/data:/var/lib/postgresql/data"
    networks:
      - backend
    # container_name: c-postgres
    restart: always
    environment:
      POSTGRES_DB: "db"
      POSTGRES_USER: "bys"
      POSTGRES_PASSWORD: "bys2018"
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == db
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## rabbitmq service
  ########################
  rabbitmq:
    image: bys-cd.chinacloudapp.cn/library/rabbitmq:3.7-management-alpine
    logging: *default-logging
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "./rabbitmq/data:/var/lib/rabbitmq"
    networks:
      - backend
    # container_name: c-rabbitmq
    restart: always
    environment:
      RABBITMQ_NODENAME: "c-rabbitmq"
      RABBITMQ_ERLANG_COOKIE: "BYS_2018"
      RABBITMQ_DEFAULT_USER: "bys"
      RABBITMQ_DEFAULT_PASS: "bys2018"
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## zookeeper service
  ########################
  zookeeper:
    image: bys-cd.chinacloudapp.cn/library/zookeeper:3.4
    logging: *default-logging
    ports:
      - "2181:2181"
    volumes:
      - "./zookeeper/conf/zookeeper.properties:/conf/zookeeper.properties:rw"
      - "./zookeeper/data:/data"
    networks:
      - backend
    # container_name: c-zookeeper
    restart: always
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## Kafka service
  ########################
  kafka:
    image: bys-cd.chinacloudapp.cn/library/kafka:2.1
    logging: *default-logging
    ports:
      - "9092:9092"
    volumes:
      # - "./kafka/conf/server.properties:/opt/kafka/config/server.properties:rw"
      # - "./kafka/conf/producer.properties:/opt/kafka/config/producer.properties:rw"
      # - "./kafka/conf/consumer.properties:/opt/kafka/config/consumer.properties:rw"
      - "./kafka/data:/kafka"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend
    depends_on:
      - zookeeper
    # container_name: c-kafka
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: ${LOCAL_IP:-zookeeper}:2181
      KAFKA_ADVERTISED_HOST_NAME: ${LOCAL_IP:-10.26.2.81}
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s

  ########################
  ## fastDFS service
  ########################
  dfstracker:
    image: bys-cd.chinacloudapp.cn/library/fastdfs:5.11
    logging: *default-logging
    ports:
      - "22122:22122"
    volumes:
      - "./fastdfs/conf/tracker.conf:/etc/fdfs/tracker.conf:ro"
      - "./fastdfs/data/tracker:/var/fdfs"
    networks:
      - backend
    # container_name: c-dfstracker
    restart: always
    command: tracker
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  dfsstorage:
    image: bys-cd.chinacloudapp.cn/library/fastdfs:5.11
    logging: *default-logging
    ports:
      - "23000:23000"
      - "8888:8888"
    volumes:
      - "./fastdfs/conf/storage.conf:/etc/fdfs/storage.conf"
      - "./fastdfs/data/storage:/var/fdfs"
    networks:
      - backend
    # container_name: c-dfsstorage
    restart: always
    depends_on:
      - dfstracker
    command: storage
    # environment:
      # TRACKER_SERVER: ${LOCAL_IP:-dfstracker}:22122
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
          constraints:
            - node.role == cache
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 6
        window: 60s
  ########################
  ## other service
  ########################

networks:
  backend: